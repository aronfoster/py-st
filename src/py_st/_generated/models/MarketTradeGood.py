# generated by datamodel-codegen:
#   filename:  MarketTradeGood.json
#   timestamp: 2025-10-09T06:51:20+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, conint

from . import ActivityLevel, SupplyLevel, TradeSymbol


class Type(Enum):
    EXPORT = "EXPORT"
    IMPORT = "IMPORT"
    EXCHANGE = "EXCHANGE"


class Model(BaseModel):
    symbol: TradeSymbol.Model
    type: Type = Field(
        ...,
        description="The type of trade good (export, import, or exchange).",
    )
    tradeVolume: conint(ge=1) = Field(
        ...,
        description="This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.",
    )
    supply: SupplyLevel.Model
    activity: Optional[ActivityLevel.Model] = None
    purchasePrice: conint(ge=0) = Field(
        ...,
        description="The price at which this good can be purchased from the market.",
    )
    sellPrice: conint(ge=0) = Field(
        ...,
        description="The price at which this good can be sold to the market.",
    )
