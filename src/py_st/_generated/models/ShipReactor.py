# generated by datamodel-codegen:
#   filename:  ShipReactor.json
#   timestamp: 2025-10-21T07:43:52+00:00

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Field, conint

from .ShipComponentCondition import ShipComponentCondition
from .ShipComponentIntegrity import ShipComponentIntegrity
from .ShipComponentQuality import ShipComponentQuality
from .ShipRequirements import ShipRequirements


class Symbol(Enum):
    REACTOR_SOLAR_I = "REACTOR_SOLAR_I"
    REACTOR_FUSION_I = "REACTOR_FUSION_I"
    REACTOR_FISSION_I = "REACTOR_FISSION_I"
    REACTOR_CHEMICAL_I = "REACTOR_CHEMICAL_I"
    REACTOR_ANTIMATTER_I = "REACTOR_ANTIMATTER_I"


class ShipReactor(BaseModel):
    symbol: Symbol = Field(..., description="Symbol of the reactor.")
    name: str = Field(..., description="Name of the reactor.")
    description: str = Field(..., description="Description of the reactor.")
    condition: ShipComponentCondition
    integrity: ShipComponentIntegrity
    powerOutput: conint(ge=1) = Field(
        ...,
        description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.",
    )
    requirements: ShipRequirements
    quality: ShipComponentQuality
